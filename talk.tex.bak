\documentclass[usenames,dvipsnames]{beamer}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{minted}
\usepackage{pgf}
\usepackage{tikz}
\usepackage{upquote}
\usepackage{hyperref}
\usepackage{graphicx}
\usetikzlibrary{arrows,automata,positioning}

\setbeamertemplate{footline}[frame number]
\setbeamertemplate{navigation symbols}{}

\title{Practical examples of writing programs and proving theorems in Idris.}
\author{Donovan Crichton}
\date{January 2020}

\begin{document}
 
\frame{\titlepage}

\begin{frame}[fragile]
  \frametitle{Preliminaries}

\end{frame}

\begin{frame}[fragile]
  \frametitle{Propositional Logic}
  \begin{itemize}
    \item Concerned with statements of verifiable facts. 
    \item Used daily by programmers when reasoning about Boolean values.
  \end{itemize}
  \begin{tabular}{| c | c | c |}
  \hline
  \textbf{Symbol} & \textbf{Meaning} & \textbf{Example} \\
  \hline
  T, F & True, False & Boolean values. \\
  $p, q, r, ...$  & Propositions & Let $p$ = "It is raining." \\
  $\lnot$ & Negation (Not) & $\lnot p$ \\
  $\land$ & Conjuction (And) & $p \land q$ \\
  $\lor$ & Disjunction (Or) & $p \lor q$ \\
  $\rightarrow$ & Implication (If) & $p \rightarrow q$ \\
  $\leftrightarrow$ & Bi Implication (Iff) & $p \leftrightarrow q$ \\
  $\equiv$ & Equivalence & $p \equiv q$ \\
  $\top$ & Tautology & $p \lor \lnot p \equiv \top$ \\
  $\bot$ & Contradiction & $p \land \lnot p \equiv \bot$ \\
  \hline
  \end{tabular}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Definitions of Connectives}
  \begin{minipage}{0.32\textwidth}
    Conjunction (And) \\
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \land q$ \\
    \hline
    T & T & T \\
    T & F & F \\
    F & T & F \\
    F & F & F \\
    \hline
    \end{tabular}
  \end{minipage}
  \begin{minipage}{0.32\textwidth}
    Disjunction (Or) \\
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \lor q$ \\
    \hline
    T & T & T \\
    T & F & T \\
    F & T & T \\
    F & F & F \\
    \hline
    \end{tabular}
  \end{minipage}
  \begin{minipage}{0.32\textwidth}
    Negation (Not) \\
    \begin{tabular}{| c | c |}
    \hline
    $p$ & $\lnot p$ \\
    \hline
    T & F \\
    F & T \\
    \hline
    \end{tabular}
  \end{minipage}
  \begin{minipage}{0.32\textwidth}
    $\;$ \\
    Implication (If) \\
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \rightarrow q$ \\
    \hline
    T & T & T \\
    T & F & F \\
    F & T & T \\
    F & F & T \\
    \hline
    \end{tabular}
  \end{minipage}
  \begin{minipage}{0.32\textwidth}
    $\;$ \\
    Bi Implication (Iff) \\
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \leftrightarrow q$ \\
    \hline
    T & T & T \\
    T & F & F \\
    F & T & F \\
    F & F & T \\
    \hline
    \end{tabular}
  \end{minipage}
  \begin{minipage}{0.32\textwidth}
    $\;$ \\
    Logical Equivalence \\
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \equiv q$ \\
    \hline
    T & T & T \\
    T & F & F \\
    F & T & F \\
    F & F & T \\
    \hline
    \end{tabular}
  \end{minipage}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Proof Techniques}
  \framesubtitle{By Exhaustion}
  Idea: Prove by enumerating all possible cases. \\
  Prove: $(\lnot p \lor q) \leftrightarrow (p \rightarrow q)$.
  \begin{tabular}{| c | c | c | c | c | c |}
  \hline
  $p$ & $q$ & $\lnot p$ & $ \lnot p \lor q$ & $p \rightarrow q$
      & $(\lnot p \lor q) \leftrightarrow (p \rightarrow q)$ \\
  \hline
  T & T & F & T & T & T \\
  T & F & F & F & F & T \\
  F & T & T & T & T & T \\
  F & F & T & T & T & T \\
  \hline
  \end{tabular}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Proof Techniques}
  \framesubtitle{By Appeal to Lemma}
  Idea: Introduce pre-proven smaller proofs (called a Lemma) to prove a larger
        proof. \\
  \begin{itemize}
    \item \textbf{Lemma 1.} $p \lor \lnot p \equiv \top$. \\
    \item \textbf{Lemma 2.} $(p \equiv q) \equiv (p \leftrightarrow q)$. 
  \end{itemize} 
  Prove: $(p \leftrightarrow q) \lor \lnot (p \equiv q) \leftrightarrow \top$.
  \begin{align*}
    (p \leftrightarrow q) \lor \lnot (p \equiv q) &\leftrightarrow \top
          &\text{Premise.} \\
    (p \equiv q) \lor \lnot (p \equiv q) &\equiv \top
          &\text{Lemma 2.} \\
    \top &\equiv \top &\text{Lemma 1.} \\
    & &\qed
  \end{align*}
\end{frame}

\begin{frame}[fragile]
  \frametitle{First Order (or Predicate) Logic}
  Extends propositional logic from reasoning about propositions to reasoning
  about sets. \\
  \begin{tabular}{| c | c | c |}
  \hline
  \textbf{Symbol} & \textbf{Meaning} & \textbf{Example} \\
  \hline
  $X, Y, Z, ...$ & Set Variables & Let $Y$ = $\{2, 3, 4\}$. \\
  $x, y, z, ...$ & Member Variables & Let $z$ = 2.\\
  $P(x), Q(y), ...$ & Predicate Variables & Let $Q(y)$ = $y > 1$ .\\
  $\forall x \in X, P(x)$ & Universal Quantifier & $\forall y \in Y, Q(y)$ \\
  $\exists x \in X, P(x)$ & Existential Quantifier & $\exists z \in Y, z = 2$\\
  \hline
  \end{tabular}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Proof Techniques}
  \framesubtitle{Induction}
  \begin{itemize}
    \item Allows us to prove that a property $P(x)$ holds $\forall x \in X$.
          Provided $X$ is well-founded.
    \item Informally well-founded means ``no infinite decreasing chains''.
  \end{itemize}
   Prove: $\forall n \in \mathbb{N}(\exists y \in \mathbb{N}, y = n + 1)$ \\
   \begin{align*}
   y &= 0 + 1 &\text{Base Case. $n = 0$} \\
     &= 1 &\qed \\
   \\
   y &= (k + 1) + 1 &\text{Inductive Step. $n = k + 1$} \\
     &= k + 2 &\qed
   \end{align*}
\end{frame}


\begin{frame}[fragile]
  \frametitle{Why should I care?}
  \begin{itemize}
    \item Types are just sets with flavour!
    \item \textbf{Bool} = $\{True, False\}$
    \item \textbf{Int} = $\{-\infty, ..., -2, -1, 0, 1, 2, 3, ..., \infty\}$
    \item Mixing of flavours is not allowed!
    \item $\{True, -2, "Hello", 1\}$ Can really only be said to be a "thing"
          flavoured set.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Propositions as Types. Proofs as Programs}
  \begin{itemize}
    \item The Curry-Howard-Lambeck correspondence is well known amongst
          Haskell programmers for the correspondence between categories and
          programming.
    \item The correspondence with logic is less often discussed.
    \item Holds for any language that is based on a typed lambda calculus.
  \end{itemize}
  Idea: A type is a propostion.
\end{frame}

\begin{frame}[fragile]
  \frametitle{What is Truth?}
    Propositional Logic and Predicate Logic consider truth to be the Boolean
     value ``True''. These logics also have a notion of vacuous truth. \\
    $\;$ \\
    \begin{minipage}{0.32\textwidth}
    \begin{tabular}{| c | c | c |}
    \hline
    $p$ & $q$ & $p \rightarrow q$ \\
    \hline
    T & T & T \\
    T & F & F \\
    F & T & T \\
    F & F & T \\
    \hline
    \end{tabular}
    \end{minipage}
  $\;$\\ \\
  In Predicate Logic: $\forall x \in \{\} P(x)$ is also true.
  \begin{itemize}
   \item If a type is a proposition, what does it mean for it to be true?
   \item A type is true iff it is inhabited with a value.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Curry-Howard in Idris}
    \begin{tabular}{c|c|c|c}
    \textbf{Logic Term} & \textbf{Logic Symbol} & \textbf{Idris Symbol}
      & \textbf{Idris Type} \\
    \hline
      Implication & p $\Rightarrow$ q & p \mintinline{idris}{->} q
      & Arrow \\
      Conjunction & p $\land$ q & \mintinline{idris}{(p, q)}
      & Pair (Product) \\
      Disjunction & p $\lor$ q & \mintinline{idris}{Either p q}
      & Enum (Sum)\\
      Negation & $\lnot$ p & \mintinline{idris}{p -> Void} &
      Void Type \\
      IFF/Eq & p $\Leftrightarrow$ q, p $\equiv$ q & \mintinline{idris}{(p -> q, q -> p)}
      & Pair Arrows \\
      Universal & $\forall$ x. P x &
      \mintinline{idris}{p -> Type} & $\Pi$ Type \\
      Existential & $\exists$ x. P x
      & \mintinline{idris}{(x ** P x)} & $\Sigma$ Type \\
      \hline
            = & = & \mintinline{idris}{p = q} & Type Equality \\
            $\top$ & True & \mintinline{idris}{()} & Unit Type \\
            $\bot$ & False & \mintinline{idris}{Void} & Uninhabited
    \end{tabular}
\end{frame}

\begin{frame}[fragile]
\frametitle{Natural Numbers}
Let $\mathbb{N}$ denote the set of natural numbers where: \\
1. Zero (0) is a natural number. \\
2. If $k$ is a natural number, then the successor of $k$ is also a natural
        number.

\begin{minted}[escapeinside=||]{idris}
data Nat : Type where
  Z : Nat
  S : (k : Nat) -> Nat
\end{minted}
\begin{itemize}
  \item \textbf{Nat : Type} is the type constructor.
  \item \textbf{S} and \textbf{K} are the value constructors.
\end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{The equality GADT}
  \begin{minted}{idris}
   data (=) : (x : A) -> (y : B) -> Type where
     Refl : x = x
  \end{minted}
  \begin{itemize}
    \item Data type to represent constructive equality.
    \item Allows intenstional (sic) equality, not extensional equality.
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Proving commutativity on addition in Idris}
  \begin{minted}[escapeinside=||]{idris}
  (+) : Nat -> Nat -> Nat
  Z     + y = Z
  (S k) + y = S (k + y)

  |\textcolor{olive}{$\forall x, y \in \mathbb{N}. x + y = y + x$}|
  plusIsCommutative : (x, y : Nat) -> x + y = y + x
  plusIsCommutative x y = ?what |\textcolor{red}{$\frac{x, y : Nat}{what : x + y = y + x}$}|
  
  plusIsCommutative : (x, y : Nat) -> x + y = y + x
  plusIsCommutative Z y = ?t1 |\textcolor{red}{$\frac{x, y : Nat}{t1 : y = y + Z}$}|
  plusIsCommutative (S k) y = ?t2 |\textcolor{red}{$\frac{x, y : Nat}{t2 : S(k + y) = y + (S\;k)}$}|
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Introducing Lemmas in Idris}
  \begin{minted}[escapeinside=||]{idris}
  |\textcolor{red}{$\frac{x, y : Nat}{t1 : y = y + Z}$}|
  lemma1 : (x : Nat) -> x = x + Z
  lemma1 Z = ?lemhole1 |\textcolor{red}{$\frac{}{lemhole1 : Z = Z}$}|
  lemma1 (S k) = ?lemhole2 

  lemma1 : (x : Nat) -> x = x + Z
  lemma1 X = Refl
  lemma1 (S k) = ?lemhole2 |\textcolor{red}{$\frac{k : Nat}{lemhole2 : S\;k = S\;(k + Z)}$}|

  lemma1 : (x : Nat) -> x = x + Z
  lemma1 Z = Refl
  lemma1 (S k) =
    let rec = lemma1 k
    in ?lemhole2 |\textcolor{red}{$\frac{k : Nat\;\;\;rec : k = k + Z}{lemhole2 : S\;k = S\;(k + Z)}$}|
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{The rewrite rule}
  \begin{itemize}
    \item replaces one side of an equality in the goal, with an equality
          sharing the same side given as an argument.
  \end{itemize}
  \begin{minted}[escapeinside=||]{idris}
  |\textcolor{red}{$\frac{k : Nat\;\;\;rec : k = k + Z}{lemhole2 : S\;k = S\;(k + Z)}$}|
  lemma1 : (x : Nat) -> x = x + Z
  lemma1 Z = Refl
  lemma1 (S k) = 
    let rec = lemma1 k
    in rewrite rec in ?lemhole2 
    |\textcolor{red}{$\frac{k : Nat\;\;\;rec : k = k + Z\;\;\;\_rewrite\_rule : k = k + Z}{lemhole2 : S\;(k + Z) = S\;(k + Z)}$}|

  lemma1 : (x : Nat) -> x = x + Z 
  lemma1 Z = Refl
  lemma1 (S k) =
    let rec = lemma1 k
    im rewrite rec in Refl
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Back to our original proof attempt!}
  \begin{minted}[escapeinside=||]{idris}
  plusIsCommutative : (x, y : Nat) -> x + y = y + x
  plusIsCommutative Z y = ?t1 |\textcolor{red}{$\frac{x, y : Nat}{t1 : y = y + Z}$}|
  plusIsCommutative (S k) y = ?t2 |\textcolor{red}{$\frac{x, y : Nat}{t2 : S(k + y) = y + (S\;k)}$}|

  plusIsCommutative : (x, y : Nat) -> x + y = y + x
  plusIsCommutative Z y = lemma1 y
  plusIsCommutative (S k) y = ?t2 |\textcolor{red}{$\frac{x, y : Nat}{t2 : S(k + y) = y + (S\;k)}$}|

  lemma2 : (x, y : Nat) -> S (k + y) = y + (S k)
  lemma2 Z y = ?lemhole1 |\textcolor{red}{$\frac{y : Nat}{lemhole1 : S\; y = S\; y}$}|
  lemma2 (S k) y = ?lemhole2 |\textcolor{red}{$\frac{k, y : Nat}{lemhole2 : S\; (S\;(k + y)) = S\;(k + (S\; y))}$}|
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Completing the second lemma.}
  \begin{minted}[escapeinside=||]{idris}
  lemma2 : (x, y : Nat) -> S (k + y) = y + (S k)
  lemma2 Z y = Refl
  lemma2 (S k) y = ?lemhole2 |\textcolor{red}{$\frac{k, y : Nat}{lemhole2 : S\; (S\;(k + y)) = S\;(k + (S\; y))}$}|

  lemma2 : (x, y : Nat) -> S (k + y) = y + (S k)
  lemma2 Z y = Refl
  lemma2 (S k) y = 
    let rec = lemma2 k y
    in ?lemhole2 |\textcolor{red}{$\frac{k, y : Nat \;\;\; rec: S\;(k + y) = k + S\; y}{lemhole2 : S\; (S\;(k + y)) = S\;(k + (S\; y))}$}|

  lemma2 : (x, y : Nat) -> S (k + y) = y + (S k)
  lemma2 Z y = Refl
  lemma2 (S k) y = 
    let rec = lemma2 k y
    in rewrite rec in ?lemhole2
    |\textcolor{red}{$\frac{k, y : Nat \;\;\; rec: S\;(k + y) = k + S\; y \;\;\; \_rewrite\_rule:S\;(k + y) = k + S\; y}{lemhole2 : S\; (k + (S\;y)) = S\;(k + (S\; y))}$}|
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Our completed proof}
  \begin{minted}[escapeinside=||]{idris}
  lemma1 : (x : Nat) -> x = x + Z 
  lemma1 Z = Refl
  lemma1 (S k) =
    let rec = lemma1 k
    im rewrite rec in Refl

  lemma2 : (x, y : Nat) -> S (k + y) = y + (S k)
  lemma2 Z y = Refl
  lemma2 (S k) y = 
    let rec = lemma2 k y
    in rewrite rec in Refl

  plusIsCommutative : (x, y : Nat) -> x + y = y + x
  plusIsCommutative Z y = lemma1 y
  plusIsCommutative (S k) y = 
    let rec = plusIsCommutative k y
    in rewrite rec in lemma2 y k
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Theorem Proving in Anger}
  Given a random number, return a 'random' element of a given list.
  \begin{minted}[escapeinside=||]{idris}
  randElem : (n : Nat) -> (xs : List a) -> a
  randElem x xs = index (mod n (length xs)) xs

  |\textcolor{red}{When checking argument}| ok |\textcolor{red}{to function index}|
  |\textcolor{red}{Can't find v/ of type}| InBounds (mod n (length xs)) xs
  \end{minted}
  Lets check out the index function then...
  \begin{minted}[escapeinside=||]{idris}
  index : (n : Nat) -> (xs : List a) -> 
          {auto ok : InBounds n xs} -> a
  \end{minted}
  Idris tries to automatically generate a value of the \mintinline{idris}{InBounds n xs} type.
\end{frame}

\begin{frame}[fragile]
  \frametitle{Propositions as (actual) Types}
  \begin{minted}[escapeinside=||]{idris}
  data InBounds : (k : Nat) -> (xs : List a) -> Type where
    InFirst : InBounds 0 (x :: xs)
    InLater : InBounds k xs -> InBounds (S k) (x :: xs)

  data LTE : (n : Nat) -> (m : Nat) -> Type where
    LTEZero : LTE Z m
    LTESucc : LTE n m -> LTE (S n) (S m)

  data NonEmpty : (xs : List a) -> Type where
    IsNonEmpty : NonEmpty (x :: xs)

  randElem : (n : Nat) -> (xs : List a) -> a
  randElem x xs = index (mod n (length xs)) xs
  \end{minted}
  Over 100 lines of lemmas later...
\end{frame}

\begin{frame}[fragile]
  \frametitle{Why are we doing this again?}
  Clearly proving these theorems is a lot of work just to get an index function
  working properly!
  \begin{itemize}
    \item A stronger guarantee of functional correctness than unit testing.
    \item Proofs only need to be written once, and can be quite general.
    \item Proofs are usually erased at compile-time in Idris unless they're
          explicitly needed at run-time.
    \item Mission critical, safety critical, or financial critical systems.
    \item How about those laws?...
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{A correct definition of Functor}
  \begin{minted}[escapeinside=||]{idris}
interface GeorgeFunctor (f : Type -> Type) where
  gmap : (a -> b) -> f a -> f b
  gIdentLaw : (xs : (f a)) -> 
              gmap Prelude.Basics.id xs = id xs
  gCompLaw : (xs : (f a)) -> (g : b -> c) -> 
             (h : a -> b) -> 
             gmap (g . h) xs = (gmap g . gmap h) xs
  \end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Correct List Implementations}
\begin{minted}[escapeinside=||]{idris}
implementation GeorgeFunctor List where
  gmap f [] = []
  gmap f (x :: xs) = f x :: gmap f xs

  gIdentLaw [] = Refl
  gIdentLaw (x :: xs) = 
    let prf = gIdentLaw (x :: xs)
    in rewrite prf in Refl

  gCompLaw [] g h = Refl
  gCompLaw (x :: xs) g h =
    let prf = gCompLaw (x :: xs) g h
    in rewrite prf in Refl

\end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Just to make sure it wasn't a fluke...}
\begin{minted}[escapeinside=||]{idris}
implementation GeorgeFunctor Maybe where
  gmap f Nothing = Nothing
  gmap f (Just x) = Just (f x)

  gIdentLaw Nothing = Refl
  gIdentLaw (Just x) = Refl

  gCompLaw Nothing g f = Refl
  gCompLaw (Just x) g f = Refl
\end{minted}
\end{frame}

\begin{frame}[fragile]
  \frametitle{In Summary...}
\begin{itemize}
  \item We can directly map proofs in mathematical logic to proofs in
          dependently typed functional languages.
  \item We can write correct definitions of category theoretic concepts such as
          function, monad, applicative etc.
  \item Writing proofs can be arduous at first, until you build up the
          intuition.
  \item Proving things gives us the strongest guarantee of correctness
        possible.
  \item More research needs to be undertaken regarding proofs around monads,
        particularly the IO monad.
\end{itemize}
\end{frame}
\end{document}
